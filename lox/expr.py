"""AUTOGENERATED! DO NOT EDIT! Make changes to tool/generate_ast.py instead"""
from abc import ABC, abstractmethod
from typing import Any, Generic, List, Optional, TypeVar
from collections import namedtuple
from lox.token import Token

T = TypeVar('T')

class Expr:
    def accept(self, visitor: 'Visitor[T]') -> T: ...
    def __hash__(self): return id(self)

class Assign(Expr, namedtuple('Assign', 'name value')):
    name: Token
    value: Expr

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_assign_expr(self)

class Binary(Expr, namedtuple('Binary', 'left operator right')):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_binary_expr(self)

class Call(Expr, namedtuple('Call', 'callee paren arguments')):
    callee: Expr
    paren: Token
    arguments: List[Expr]

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_call_expr(self)

class Conditional(Expr, namedtuple('Conditional', 'condition then_branch else_branch')):
    condition: Expr
    then_branch: Expr
    else_branch: Expr

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_conditional_expr(self)

class Get(Expr, namedtuple('Get', 'object name')):
    object: Expr
    name: Token

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_get_expr(self)

class Grouping(Expr, namedtuple('Grouping', 'expression')):
    expression: Expr

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_grouping_expr(self)

class Literal(Expr, namedtuple('Literal', 'value')):
    value: Any

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_literal_expr(self)

class Logical(Expr, namedtuple('Logical', 'left operator right')):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_logical_expr(self)

class Set(Expr, namedtuple('Set', 'object name value')):
    object: Expr
    name: Token
    value: Expr

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_set_expr(self)

class This(Expr, namedtuple('This', 'keyword')):
    keyword: Token

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_this_expr(self)

class Unary(Expr, namedtuple('Unary', 'operator right')):
    operator: Token
    right: Expr

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_unary_expr(self)

class Variable(Expr, namedtuple('Variable', 'name')):
    name: Token

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_variable_expr(self)

R = TypeVar('R')

class Visitor(Generic[R], ABC):
    @abstractmethod
    def visit_assign_expr(self, e: Assign) -> R: ...
    @abstractmethod
    def visit_binary_expr(self, e: Binary) -> R: ...
    @abstractmethod
    def visit_call_expr(self, e: Call) -> R: ...
    @abstractmethod
    def visit_conditional_expr(self, e: Conditional) -> R: ...
    @abstractmethod
    def visit_get_expr(self, e: Get) -> R: ...
    @abstractmethod
    def visit_grouping_expr(self, e: Grouping) -> R: ...
    @abstractmethod
    def visit_literal_expr(self, e: Literal) -> R: ...
    @abstractmethod
    def visit_logical_expr(self, e: Logical) -> R: ...
    @abstractmethod
    def visit_set_expr(self, e: Set) -> R: ...
    @abstractmethod
    def visit_this_expr(self, e: This) -> R: ...
    @abstractmethod
    def visit_unary_expr(self, e: Unary) -> R: ...
    @abstractmethod
    def visit_variable_expr(self, e: Variable) -> R: ...
