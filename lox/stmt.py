"""AUTOGENERATED! DO NOT EDIT! Make changes to tool/generate_ast.py instead"""
from abc import ABC, abstractmethod
from typing import Any, Generic, Optional, TypeVar
from dataclasses import dataclass

from lox.token import Token
from lox.expr import Expr

T = TypeVar('T')

class Stmt:
    def accept(self, visitor: 'Visitor[T]') -> T: ...

@dataclass
class Block(Stmt):
    statements: list[Stmt]

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_block_stmt(self)

@dataclass
class Expression(Stmt):
    expression: Expr

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_expression_stmt(self)

@dataclass
class If(Stmt):
    condition: Expr
    then_branch: Stmt
    else_branch: Stmt

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_if_stmt(self)

@dataclass
class Print(Stmt):
    expression: Expr

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_print_stmt(self)

@dataclass
class Var(Stmt):
    name: Token
    initializer: Optional[Expr]

    def accept(self, visitor: 'Visitor[T]') -> T:
        return visitor.visit_var_stmt(self)

R = TypeVar('R')

class Visitor(Generic[R], ABC):
    @abstractmethod
    def visit_block_stmt(self, s: Block) -> R: ...
    @abstractmethod
    def visit_expression_stmt(self, s: Expression) -> R: ...
    @abstractmethod
    def visit_if_stmt(self, s: If) -> R: ...
    @abstractmethod
    def visit_print_stmt(self, s: Print) -> R: ...
    @abstractmethod
    def visit_var_stmt(self, s: Var) -> R: ...
