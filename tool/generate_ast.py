import sys

ast = {
    'Binary': ['left: Expr', 'operator: Token', 'right: Expr'],
    'Conditional': ['condition: Expr', 'then_branch: Expr', 'else_branch: Expr'],
    'Grouping': ['expression: Expr'],
    'Literal': ['value: Any'],
    'Unary': ['operator: Token', 'right: Expr'],
}

base = 'Expr'

f = open(sys.argv[1], 'w+')
f.write('"""AUTOGENERATED! DO NOT EDIT! Make changes to tool/generate_ast.py instead"""\n')
f.write('from typing import Any, Generic, TypeVar\n')
f.write('from dataclasses import dataclass\n')
f.write('\n')
f.write('from lox.token import Token\n')
f.write('\n')

f.write(f"T = TypeVar('T')\n")
f.write(f"class {base}:\n")
f.write(f"    def accept(self, visitor: 'Visitor[T]') -> T: ...\n")
f.write(f'\n')

for cls, fields in ast.items():
    f.write(f'@dataclass\n')
    f.write(f'class {cls}({base}):\n')
    for field in fields:
        f.write(f'    {field}\n')
    f.write('\n')
    f.write(f"    def accept(self, visitor: 'Visitor[T]') -> T:\n")
    f.write(f"        return visitor.visit{cls.capitalize()}{base}(self)\n")
    f.write('\n')

f.write(f"R = TypeVar('R')\n")
f.write(f"class Visitor(Generic[R]):\n")

for cls in ast:
    f.write(f"    def visit{cls.capitalize()}{base}(self, {base.lower()}: {cls}) -> R: ...\n")
